<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【JQuery】$.when、$.Deferred</title>
      <link href="/2017/09/10/2017-09-10/"/>
      <url>/2017/09/10/2017-09-10/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前端網站初始化常需要透過一個或多個$.Ajax先跟後端要取資料，<br>你可以想像<strong>$.Ajax是送出去的一隻鴿子</strong>，<br><strong>每一隻鴿子都有自己的目標地，腳下裝著要帶給後端的訊息，</strong><br><strong>這些鴿子訪問完目標地後，會把你需要的資料帶回來，讓你顯示在前端網頁上，</strong></p><p>但<strong>你不太確定這些鴿子什麼時候回來</strong>，<br><strong>你也不確定這些鴿子是否會帶回正確的資料</strong>(假如後端程式出錯)，<br>你網站初始化時，不太可能等這些鴿子都回來再繼續下一個步驟，<br>&nbsp;</p><h3 id="when配合-Deferred"><a href="#when配合-Deferred" class="headerlink" title="$.when配合$.Deferred()"></a>$.when配合$.Deferred()</h3><p>透過JQuery的$.when配合$.Deferred()完成多個$.ajax的異步處理，<br>當鴿子送出去後，你可以先執行其他的程式碼，<br>當鴿子回來後，再利用鴿子帶回的資料執行部分程式碼，<br>控制這群鴿子回來時，如果資料正確則做什麼、如果產生錯誤則做什麼，及不管如何皆執行什麼，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$.when(function1(), function2()).done(<span class="function"><span class="keyword">function</span>(<span class="params">result1, result2</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'success code'</span>);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'error code'</span>);</span><br><span class="line">&#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'always do'</span>);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">function1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dfd = $.Deferred();</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url : <span class="string">''</span>,</span><br><span class="line">type: <span class="string">'GET'</span>,</span><br><span class="line">date: &#123;&#125;,</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">dfd.resolve(res);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;        </span><br><span class="line">dfd.reject();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> dfd.promise();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">function2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dfd = $.Deferred();</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url : <span class="string">''</span>,</span><br><span class="line">type: <span class="string">'GET'</span>,</span><br><span class="line">date: &#123;&#125;,</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">dfd.resolve(res);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;        </span><br><span class="line">dfd.reject();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> dfd.promise();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h3 id="Deferred-控制返回"><a href="#Deferred-控制返回" class="headerlink" title="$.Deferred()控制返回"></a>$.Deferred()控制返回</h3><p>這裡可以看到$.ajax常使用$.Deferred()來控制返回時的各種狀況，</p><p><strong>$.Deferred有一個狀態的概念：</strong></p><ul><li>使用$.Deferred.resolve()，將狀態更改為resolved，此時$.when就會執行done裡面的程式碼，</li><li>使用$.Deferred.reject()，將狀態更改為rejected，此時$.when就會執行fail裡面的程式碼，</li><li>最後JQuery官方建議使用return $.Deferred.promise()，防止其他程式變更這個狀態，結束這個function的呼叫，<br>&nbsp;</li></ul><p>另外<br>我們也可以直接宣告一個$.Deferred物件，來控制某段程式執行後，<br>當你不確定他什麼時候完成，但有一片段，需要等他完成後才來執行的情形，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alertFun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> dfd = $.Deferred(); <span class="comment">//新建一個Deferred對象</span></span><br><span class="line"><span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//五秒後執行task()</span></span><br><span class="line">alert(<span class="string">'第三個執行'</span>);</span><br><span class="line">dfd.resolve(<span class="string">'第四個執行'</span>); <span class="comment">//改變Deferred執行狀態回到$.when</span></span><br><span class="line">alert(<span class="string">'第六個執行'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setTimeout(task, <span class="number">5000</span>);</span><br><span class="line">alert(<span class="string">'第一個執行!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dfd.promise();</span><br><span class="line">alert(<span class="string">'永遠不會執行!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.when(alertFun()).done(<span class="function"><span class="keyword">function</span>(<span class="params">resource</span>)</span>&#123; <span class="comment">//呼叫alertFun</span></span><br><span class="line">alert(resource); <span class="comment">//此時resource = '第四個執行'</span></span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'出錯'</span>); </span><br><span class="line">&#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">'第五個執行'</span>); </span><br><span class="line">&#125;); </span><br><span class="line">alert(<span class="string">'第二個執行'</span>);</span><br></pre></td></tr></table></figure><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><ol><li>task來模擬那個不確定什麼時候完成的任務，假設需要五秒時間執行，故繼續執行$when之後的alert(‘第二個執行’)。</li><li>五秒後繼續執行task方法，遇到dtd.resolve，代表Deferred對象執行完畢可跳到done內。</li><li>done執行的function()參數等於dtd.resolve()放入參數。</li><li>return dtd.promise()後面的程式碼不會執行，dtd.resolve()後的程式碼會執行。</li><li>如果拿掉$.Deferred()，他執行完alertFun()裡面的程式，會被視為resolved狀態，不會等待五秒後遇到dfd.resolve()才執行done()，而是立刻執行，但此時你的五秒任務(也許是要資料)尚未完成。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
